// <auto-generated />
using System;
using Egabinet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230429212838_add-tables")]
    partial class addtables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = "3e01671b-18fc-4f8c-bfd8-fa12666a99b6",
                            Adress = " Kolorowa 5",
                            Name = "Adam",
                            PermissionNumber = " 569853",
                            SpecializationId = "6a3d526e-1fb6-4de7-bde5-e0754fc58aec",
                            Surname = "Kowalski",
                            UserId = "ef9632fc-d406-412f-9b7a-09b902db6dfa"
                        },
                        new
                        {
                            Id = "1769f6fc-fb40-44ed-bb10-70c0c13a97e3",
                            Adress = " Zielona 5",
                            Name = "Zofia",
                            PermissionNumber = " 560053",
                            SpecializationId = "4e8effeb-0a99-4038-9420-0c543a3a28ac",
                            Surname = "Kowalski",
                            UserId = "785a5776-fbba-4021-a263-4b9daade6ac8"
                        },
                        new
                        {
                            Id = "ba61c248-a31d-4c10-9e7c-9d8d32defeea",
                            Adress = " Adama Mickiewicza 8",
                            Name = "Todor",
                            PermissionNumber = " 160053",
                            SpecializationId = "e86959d5-6eed-45f7-b5cb-6b8f68a4d085",
                            Surname = " Nowaki",
                            UserId = "452db704-3650-457a-a7da-ca545a521776"
                        },
                        new
                        {
                            Id = "519e3b1c-8357-470d-9643-9be49bd669a3",
                            Adress = " Obozowa 8",
                            Name = "Grzegorz",
                            PermissionNumber = " 560053",
                            SpecializationId = "690e47d4-996b-43b7-a23b-d9693cf5962c",
                            Surname = "Lem",
                            UserId = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f"
                        });
                });

            modelBuilder.Entity("Core.Domain.Nurse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Nurse");

                    b.HasData(
                        new
                        {
                            Id = "9ae453af-8db3-440c-b8d0-1c55299ce188",
                            Address = " Różana 5",
                            Name = "AZofia",
                            PermissionNumber = " 509853",
                            Surname = "Stanecka",
                            UserId = "00221f79-bc71-4186-9e5d-bfd57a80a43f"
                        },
                        new
                        {
                            Id = "e40f8b49-f885-48c0-bb64-21c0d0813e88",
                            Address = " Topografów 5",
                            Name = "Hanna",
                            PermissionNumber = " 510053",
                            Surname = " Oklejka",
                            UserId = "32923230-6c8c-4510-b73e-d9bcf2484879"
                        },
                        new
                        {
                            Id = "68041977-3f99-4e4f-ac71-0b03a3606750",
                            Address = " os. Kolorowe 8",
                            Name = "Anna ",
                            PermissionNumber = " 169053",
                            Surname = " Austen",
                            UserId = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8"
                        },
                        new
                        {
                            Id = "965e09d6-0ed5-4e7a-8950-e252b1ae5380",
                            Address = " Obozowa 14",
                            Name = "Glżbieta Lem",
                            PermissionNumber = " 567053",
                            Surname = " Lockman",
                            UserId = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83"
                        });
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Pesel")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = "9262b74c-f7b4-47ba-8fcf-087241096f34",
                            Address = " Magnoliowa 5",
                            Name = "Adam",
                            Pesel = 85011259884L,
                            Surname = "Nowak",
                            UserId = "66126f74-f32b-435d-9e24-b3ed8b3d6011"
                        },
                        new
                        {
                            Id = "23159457-b301-4839-932a-3fd939f8b6c4",
                            Address = " Ostoja 5",
                            Name = "Zofia",
                            Pesel = 78020607221L,
                            Surname = "Stanecka",
                            UserId = "26dfb75e-5f31-4a54-9844-f019998a61d1"
                        },
                        new
                        {
                            Id = "9de0d585-60a6-445c-910c-e26ccaf46274",
                            Address = " Żeromskiego 4",
                            Name = "Austen",
                            Pesel = 95011259884L,
                            Surname = "Nowaki",
                            UserId = "64791af4-436d-4419-b3e1-14641bdb2493"
                        },
                        new
                        {
                            Id = "816c62f5-2b08-4042-8008-07a46b920921",
                            Address = " Obozowa 15",
                            Name = "Grzegorz",
                            Pesel = 65011259884L,
                            Surname = "Fus",
                            UserId = "cef7f7aa-d198-4373-b441-926d8e52dbb1"
                        });
                });

            modelBuilder.Entity("Core.Domain.Room", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = "d36af7ac-73cb-459e-847f-0abea3581814",
                            Number = 1L
                        },
                        new
                        {
                            Id = "4b4e2a8f-ab04-40ab-827d-3c7789208e4c",
                            Number = 2L
                        },
                        new
                        {
                            Id = "c5f12060-322b-42be-bba6-689e2e0c5721",
                            Number = 3L
                        },
                        new
                        {
                            Id = "525e8058-b3a1-4a9f-83e5-355848d1e6c5",
                            Number = 4L
                        });
                });

            modelBuilder.Entity("Core.Domain.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            Id = "6a3d526e-1fb6-4de7-bde5-e0754fc58aec",
                            Value = "Lekarz rodzinny"
                        },
                        new
                        {
                            Id = "4e8effeb-0a99-4038-9420-0c543a3a28ac",
                            Value = "Endokrynolog"
                        },
                        new
                        {
                            Id = "e86959d5-6eed-45f7-b5cb-6b8f68a4d085",
                            Value = "Laryngolog"
                        },
                        new
                        {
                            Id = "690e47d4-996b-43b7-a23b-d9693cf5962c",
                            Value = "Stomatolog"
                        });
                });

            modelBuilder.Entity("Core.Domain.TimeSheet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("TimeSheet");

                    b.HasData(
                        new
                        {
                            Id = "06223eb9-588c-4b2d-a0ab-c3c5ad65ae78",
                            Data = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "3e01671b-18fc-4f8c-bfd8-fa12666a99b6",
                            PatientId = "9262b74c-f7b4-47ba-8fcf-087241096f34",
                            RoomId = "d36af7ac-73cb-459e-847f-0abea3581814"
                        },
                        new
                        {
                            Id = "56932a73-5813-4215-bc39-686b11a12afc",
                            Data = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "1769f6fc-fb40-44ed-bb10-70c0c13a97e3",
                            PatientId = "23159457-b301-4839-932a-3fd939f8b6c4",
                            RoomId = "4b4e2a8f-ab04-40ab-827d-3c7789208e4c"
                        },
                        new
                        {
                            Id = "64060098-a52b-4e91-b5b6-63d292cea083",
                            Data = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "ba61c248-a31d-4c10-9e7c-9d8d32defeea",
                            PatientId = "9de0d585-60a6-445c-910c-e26ccaf46274",
                            RoomId = "c5f12060-322b-42be-bba6-689e2e0c5721"
                        },
                        new
                        {
                            Id = "7fd77adc-02e5-444e-9b7e-feb2113ac22f",
                            Data = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "519e3b1c-8357-470d-9643-9be49bd669a3",
                            PatientId = "816c62f5-2b08-4042-8008-07a46b920921",
                            RoomId = "525e8058-b3a1-4a9f-83e5-355848d1e6c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "72f2ff00-761f-4727-b07c-5381992b5e0a",
                            ConcurrencyStamp = "1614ce87-2fdd-4a6e-bba4-eb0b7b520ea8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c1eeb9bd-5412-495a-8abf-a4157f1b546d",
                            ConcurrencyStamp = "3ae41ab9-20ad-4435-ab5c-5fec1d571ec9",
                            Name = "Reader",
                            NormalizedName = "READER"
                        },
                        new
                        {
                            Id = "04d94d89-fe74-43ba-b052-90d5f3dea95f",
                            ConcurrencyStamp = "17d20a8c-e9ee-4b48-9d60-4bcc2d173810",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "66126f74-f32b-435d-9e24-b3ed8b3d6011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4364b001-b418-4e71-81e9-a5dc24497a89",
                            Email = "user1@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@OP.PL",
                            NormalizedUserName = "USER1@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEFNr+2wDA2EJ7Rf79wh0MqOz9RlaOh+oJfUbbL0bO/hHfxVU1yUcBRonsr0YyDcsSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41ea6093-e789-4efc-afde-93f1cdbb6acd",
                            TwoFactorEnabled = false,
                            UserName = "user1@op.pl"
                        },
                        new
                        {
                            Id = "26dfb75e-5f31-4a54-9844-f019998a61d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31f9a593-ca44-4c50-a89d-049c0d945509",
                            Email = "user2@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@OP.PL",
                            NormalizedUserName = "USER2@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEG7DCQJp7lIQ0oLzIhoY12wcid0FRn8a31TiKBypasgVgaFYqGVvLe0W+purH45qKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68c471b4-2940-402f-a6c7-2018cd176d9b",
                            TwoFactorEnabled = false,
                            UserName = "user2@op.pl"
                        },
                        new
                        {
                            Id = "64791af4-436d-4419-b3e1-14641bdb2493",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "835b2652-5e42-4446-bb71-fe6408c098ca",
                            Email = "user3@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@OP.PL",
                            NormalizedUserName = "USER3@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEN9qHbzZMnA4lnZ2YNIx3Mc2atPRU9bH3gnu6ENkhojqBReupp9IbZ4b3sVuQLZfcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "801beca2-efce-45c3-90e4-3b47acaad1ac",
                            TwoFactorEnabled = false,
                            UserName = "user3@op.pl"
                        },
                        new
                        {
                            Id = "cef7f7aa-d198-4373-b441-926d8e52dbb1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d8921eb-ba62-4c36-ab12-dbd64546a4fa",
                            Email = "user4@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@OP.PL",
                            NormalizedUserName = "USER4@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGEzLYUrsx/7TMaq+4Q/G6wW/B+7K4KfQwoik5CS1jmaPBO5b0mGoA+TvBS9VlywAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33de4122-a2e4-4de7-9925-ea8e33a0b534",
                            TwoFactorEnabled = false,
                            UserName = "user4@op.pl"
                        },
                        new
                        {
                            Id = "00221f79-bc71-4186-9e5d-bfd57a80a43f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c381246-2762-4d4c-ada6-258255990b86",
                            Email = "user5@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@OP.PL",
                            NormalizedUserName = "USER5@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEO6CE6+bBwSGmitxNTeCqXlI91lhoGyNmnYo+tx6Cjc1PF+Oycq1Nhdnjh693kM8kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d5c64cb-cd4b-4cc2-ab85-500f3176a4fb",
                            TwoFactorEnabled = false,
                            UserName = "user5@op.pl"
                        },
                        new
                        {
                            Id = "32923230-6c8c-4510-b73e-d9bcf2484879",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df4203ec-16f6-4a94-9ff2-435899424eb3",
                            Email = "user6@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@OP.PL",
                            NormalizedUserName = "USER6@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1YXgBBRDvtxBC0ycZNjFIxTH7VQesMXrNBeQXtvtZLdcOwwkFvtWCl9vNlDGka6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2380a45-e1ab-4ab2-811f-aad5c6b95c55",
                            TwoFactorEnabled = false,
                            UserName = "user6@op.pl"
                        },
                        new
                        {
                            Id = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f935b2b-73fd-48ba-8cb8-58b7c6d5c84d",
                            Email = "user7@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@OP.PL",
                            NormalizedUserName = "USER7@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEPBTGQEy6KraYKFz5fRo+2F3hGVyi55aDemPHFIXzA09wnfMBH3HX+hSpFKxc+dRow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c33239a7-c0e2-46c7-a700-6398626004fb",
                            TwoFactorEnabled = false,
                            UserName = "user7@op.pl"
                        },
                        new
                        {
                            Id = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a8c4035-b9a9-498b-94ab-8a6df1ca4aec",
                            Email = "user8@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@OP.PL",
                            NormalizedUserName = "USER8@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAENbyyHtMS7QpbdSMYM2ebZVCwczWckoI0KBY4jLa9UD+mLkXoGf6I3V8d28wEE6FYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea8874e9-ddb6-49e7-8f38-9ed69d0aee99",
                            TwoFactorEnabled = false,
                            UserName = "user8@op.pl"
                        },
                        new
                        {
                            Id = "ef9632fc-d406-412f-9b7a-09b902db6dfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39166dae-f6ad-405c-80f9-1afdcf4077a3",
                            Email = "user9@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@OP.PL",
                            NormalizedUserName = "USER9@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAENNBb7rgNYbLHY84XpiLsj+EPr81bsaXA3Ule9LxpQ2ImW1P3cY2GTOHhv9jdzHcdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2af7d475-7d7c-455d-a36c-7268b43423c2",
                            TwoFactorEnabled = false,
                            UserName = "user9@op.pl"
                        },
                        new
                        {
                            Id = "785a5776-fbba-4021-a263-4b9daade6ac8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86dda2be-212f-4837-be92-102d0755626b",
                            Email = "user10@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@OP.PL",
                            NormalizedUserName = "USER10@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEC2/R3VepDDFSM5+7ZYcBAmciTwOLxrK7jSJefISNsA9cm3spDtvnXd4N/WhOJi0Ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e97e162-6004-4245-8601-3a54639e1a5c",
                            TwoFactorEnabled = false,
                            UserName = "user10@op.pl"
                        },
                        new
                        {
                            Id = "452db704-3650-457a-a7da-ca545a521776",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f19e045f-b5a7-41a4-95ee-1aa17088780e",
                            Email = "user11@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER11@OP.PL",
                            NormalizedUserName = "USER11@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHgoj1yZ2yf86JFjAGddXPazj/a7BvcPb3KdLbDz9vF4/j0K+ju5WShpX3CYe+8bRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd8cee6c-e43d-4c11-8199-bbe179f2710c",
                            TwoFactorEnabled = false,
                            UserName = "user11@op.pl"
                        },
                        new
                        {
                            Id = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c2b9105-ed36-431e-84dc-6389cc7f94ff",
                            Email = "user12@op.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER12@OP.PL",
                            NormalizedUserName = "USER12@OP.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEAepMVtyrS74NysYm81778pvg+rI7kgvqlwLfxOvi7PsJ4tePnTO1PINswHivKVqSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc9af265-3095-41f0-b846-f7b7f718744d",
                            TwoFactorEnabled = false,
                            UserName = "user12@op.pl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "66126f74-f32b-435d-9e24-b3ed8b3d6011",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "26dfb75e-5f31-4a54-9844-f019998a61d1",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "64791af4-436d-4419-b3e1-14641bdb2493",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "cef7f7aa-d198-4373-b441-926d8e52dbb1",
                            RoleId = "c1eeb9bd-5412-495a-8abf-a4157f1b546d"
                        },
                        new
                        {
                            UserId = "00221f79-bc71-4186-9e5d-bfd57a80a43f",
                            RoleId = "72f2ff00-761f-4727-b07c-5381992b5e0a"
                        },
                        new
                        {
                            UserId = "32923230-6c8c-4510-b73e-d9bcf2484879",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "ed216c2a-3e1c-486f-b8ca-5f13bd8baee8",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "c2ebef8b-eee6-4328-ba4d-f01a04fe4f83",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "ef9632fc-d406-412f-9b7a-09b902db6dfa",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "785a5776-fbba-4021-a263-4b9daade6ac8",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "452db704-3650-457a-a7da-ca545a521776",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        },
                        new
                        {
                            UserId = "7fe50ba2-def6-4ac0-8b3e-87d3b4ce693f",
                            RoleId = "04d94d89-fe74-43ba-b052-90d5f3dea95f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Doctor", b =>
                {
                    b.HasOne("Core.Domain.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Nurse", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.TimeSheet", b =>
                {
                    b.HasOne("Core.Domain.Doctor", "Doctor")
                        .WithMany("TimeSheet")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Patient", "Patient")
                        .WithMany("TimeSheet")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domain.Room", "Room")
                        .WithMany("TimeSheet")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Doctor", b =>
                {
                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Core.Domain.Patient", b =>
                {
                    b.Navigation("TimeSheet");
                });

            modelBuilder.Entity("Core.Domain.Room", b =>
                {
                    b.Navigation("TimeSheet");
                });
#pragma warning restore 612, 618
        }
    }
}
